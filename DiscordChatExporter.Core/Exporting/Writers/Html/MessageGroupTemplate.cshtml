@using System
@using System.Linq
@using System.Threading.Tasks
@using DiscordChatExporter.Core.Discord.Data
@using DiscordChatExporter.Core.Exporting.Writers.Html;
@using DiscordChatExporter.Core.Utils.Extensions

@namespace DiscordChatExporter.Core.Exporting.Writers.Html
@inherits MiniRazor.TemplateBase<MessageGroupTemplateContext>

@{
    var firstMessage = Model.Messages.First();

    ValueTask<string> ResolveUrlAsync(string url) => Model.ExportContext.ResolveMediaUrlAsync(url);

    string FormatDate(DateTimeOffset date) => Model.ExportContext.FormatDate(date);

    string FormatMarkdown(string markdown) => Model.FormatMarkdown(markdown);

    string FormatEmbedMarkdown(string markdown) => Model.FormatMarkdown(markdown, false);

    var userMember = Model.ExportContext.TryGetMember(firstMessage.Author.Id);

    var userColor = Model.ExportContext.TryGetUserColor(firstMessage.Author.Id);

    var userNick = firstMessage.Author.IsBot
        ? firstMessage.Author.Name
        : userMember?.Nick ?? firstMessage.Author.Name;

    var referencedUserMember = firstMessage.ReferencedMessage is not null
        ? Model.ExportContext.TryGetMember(firstMessage.ReferencedMessage.Author.Id)
        : null;

    var referencedUserColor = firstMessage.ReferencedMessage is not null
        ? Model.ExportContext.TryGetUserColor(firstMessage.ReferencedMessage.Author.Id)
        : null;

    var referencedUserNick = firstMessage.ReferencedMessage is not null
        ? firstMessage.ReferencedMessage.Author.IsBot
            ? firstMessage.ReferencedMessage.Author.Name
            : referencedUserMember?.Nick ?? firstMessage.ReferencedMessage.Author.Name
        : null;
}

<div class="chatlog__message-group">
@for (var i = 0; i < Model.Messages.Count; i++)
{
    var isFirst = i == 0;
    var message = Model.Messages[i];

    <div id="chatlog__message-container-@message.Id" class="chatlog__message-container @(message.IsPinned ? "chatlog__message-container--pinned" : null)" data-message-id="@message.Id">
        <div class="chatlog__message">
            @{/* Left side */}
            <div class="chatlog__message-aside">
                @if (isFirst)
                {
                    // Reference symbol
                    if (message.Reference is not null)
                    {
                        <div class="chatlog__reference-symbol"></div>
                    }

                    // Avatar
                    <img class="chatlog__avatar" src="@await ResolveUrlAsync(message.Author.AvatarUrl)" alt="Avatar" loading="lazy">
                }
                else
                {
                    <div class="chatlog__short-timestamp" title="@FormatDate(message.Timestamp)">@message.Timestamp.ToLocalString("t")</div>
                }
            </div>

            @{/* Right side */}
            <div class="chatlog__message-primary">
                @if (isFirst)
                {
                    // Reference
                    if (message.Reference is not null)
                    {
                        <div class="chatlog__reference">
                            @if (message.ReferencedMessage is not null)
                            {
                                <img class="chatlog__reference-avatar" src="@await ResolveUrlAsync(message.ReferencedMessage.Author.AvatarUrl)" alt="Avatar" loading="lazy">
                                <div class="chatlog__reference-author" style="@(referencedUserColor is not null ? $"color: rgb({referencedUserColor.Value.R}, {referencedUserColor.Value.G}, {referencedUserColor.Value.B})" : null)" title="@message.ReferencedMessage.Author.FullName">@referencedUserNick</div>
                                <div class="chatlog__reference-content">
                                    <span class="chatlog__reference-link" onclick="scrollToMessage(event, '@message.ReferencedMessage.Id')">
                                        @if (!string.IsNullOrWhiteSpace(message.ReferencedMessage.Content))
                                        {
                                            @Raw(FormatEmbedMarkdown(message.ReferencedMessage.Content))
                                        }
                                        else if (message.ReferencedMessage.Attachments.Any() || message.ReferencedMessage.Embeds.Any())
                                        {
                                            <em>Click to see attachment</em>
                                            <span>üñºÔ∏è</span>
                                        }
                                        else
                                        {
                                            <em>Click to see original message</em>
                                        }
                                    </span>

                                    @if (message.ReferencedMessage.EditedTimestamp is not null)
                                    {
                                        <span class="chatlog__reference-edited-timestamp" title="@FormatDate(message.ReferencedMessage.EditedTimestamp.Value)">(edited)</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="chatlog__reference-unknown">
                                    Original message was deleted or could not be loaded.
                                </div>
                            }
                        </div>
                    }

                    // Header
                    <div class="chatlog__header">
                        @{/* Author name */}
                        <span class="chatlog__author" style="@(userColor is not null ? $"color: rgb({userColor.Value.R}, {userColor.Value.G}, {userColor.Value.B})" : null)" title="@message.Author.FullName" data-user-id="@message.Author.Id">@userNick</span>

                        @{/* Bot label */}
                        @if (message.Author.IsBot)
                        {
                            <span class="chatlog__bot-label">BOT</span>
                        }

                        @{/* Timestamp */}
                        <span class="chatlog__timestamp"><a href="#chatlog__message-container-@message.Id">@FormatDate(message.Timestamp)</a></span>
                    </div>
                }

                @{/* Content */}
                @if (!string.IsNullOrWhiteSpace(message.Content) || message.EditedTimestamp is not null)
                {
                    <div class="chatlog__content chatlog__markdown">
                        @{/* Text */}
                        <span class="chatlog__markdown-preserve">@Raw(FormatMarkdown(message.Content))</span>

                        @{/* Edited timestamp */}
                        @if (message.EditedTimestamp is not null)
                        {
                            <span class="chatlog__edited-timestamp" title="@FormatDate(message.EditedTimestamp.Value)">(edited)</span>
                        }
                    </div>
                }

                @{/* Attachments */}
                @foreach (var attachment in message.Attachments)
                {
                    <div class="chatlog__attachment @(attachment.IsSpoiler ? "chatlog__attachment--hidden" : "")" onclick="@(attachment.IsSpoiler ? "showSpoiler(event, this)" : "")">
                        @{/* Spoiler caption */}
                        @if (attachment.IsSpoiler)
                        {
                            <div class="chatlog__attachment-spoiler-caption">SPOILER</div>
                        }

                        @{/* Attachment preview */}
                        @if (attachment.IsImage)
                        {
                            <a href="@await ResolveUrlAsync(attachment.Url)">
                                <img class="chatlog__attachment-media" src="@await ResolveUrlAsync(attachment.Url)" alt="@(attachment.Description ?? "Image attachment")" title="Image: @attachment.FileName (@attachment.FileSize)" loading="lazy">
                            </a>
                        }
                        else if (attachment.IsVideo)
                        {
                            <video class="chatlog__attachment-media" controls>
                                <source src="@await ResolveUrlAsync(attachment.Url)" alt="@(attachment.Description ?? "Video attachment")" title="Video: @attachment.FileName (@attachment.FileSize)">
                            </video>
                        }
                        else if (attachment.IsAudio)
                        {
                            <audio class="chatlog__attachment-media" controls>
                                <source src="@await ResolveUrlAsync(attachment.Url)" alt="@(attachment.Description ?? "Audio attachment")" title="Audio: @attachment.FileName (@attachment.FileSize)">
                            </audio>
                        }
                        else
                        {
                            <div class="chatlog__attachment-generic">
                                <svg class="chatlog__attachment-generic-icon">
                                    <use href="#attachment-icon"/>
                                </svg>
                                <div class="chatlog__attachment-generic-name">
                                    <a href="@await ResolveUrlAsync(attachment.Url)">
                                        @attachment.FileName
                                    </a>
                                </div>
                                <div class="chatlog__attachment-generic-size">
                                    @attachment.FileSize
                                </div>
                            </div>
                        }
                    </div>
                }

                @{/* Embeds */}
                @foreach (var embed in message.Embeds)
                {
                    // Plain image embed
                    if (embed.TryGetPlainImage() is { } plainImageEmbed)
                    {
                        <div class="chatlog__embed">
                            <a href="@await ResolveUrlAsync(plainImageEmbed.Url)">
                                <img class="chatlog__embed-plainimage" src="@await ResolveUrlAsync(plainImageEmbed.Url)" alt="Embedded image" loading="lazy">
                            </a>
                        </div>
                    }
                    // Spotify embed
                    else if (embed.TryGetSpotifyTrack() is { } spotifyTrackEmbed)
                    {
                        <div class="chatlog__embed">
                            <div class="chatlog__embed-spotify-container">
                                <iframe class="chatlog__embed-spotify" src="@spotifyTrackEmbed.Url" width="400" height="80" allowtransparency="true" allow="encrypted-media"></iframe>
                            </div>
                        </div>
                    }
                    // YouTube embed
                    else if (embed.TryGetYouTubeVideo() is { } youTubeVideoEmbed)
                    {
                        <div class="chatlog__embed">
                            @{/* Color pill */}
                            @if (embed.Color is not null)
                            {
                                <div class="chatlog__embed-color-pill" style="background-color: rgba(@embed.Color.Value.R, @embed.Color.Value.G, @embed.Color.Value.B, @embed.Color.Value.A)"></div>
                            }
                            else
                            {
                                <div class="chatlog__embed-color-pill chatlog__embed-color-pill--default"></div>
                            }

                            <div class="chatlog__embed-content-container">
                                <div class="chatlog__embed-content">
                                    <div class="chatlog__embed-text">
                                        @{/* Embed author */}
                                        @if (embed.Author is not null)
                                        {
                                            <div class="chatlog__embed-author-container">
                                                @if (!string.IsNullOrWhiteSpace(embed.Author.IconUrl))
                                                {
                                                    <img class="chatlog__embed-author-icon" src="@await ResolveUrlAsync(embed.Author.IconProxyUrl ?? embed.Author.IconUrl)" alt="Author icon" loading="lazy" onerror="this.style.visibility='hidden'">
                                                }

                                                @if (!string.IsNullOrWhiteSpace(embed.Author.Name))
                                                {
                                                    if (!string.IsNullOrWhiteSpace(embed.Author.Url))
                                                    {
                                                        <a class="chatlog__embed-author-link" href="@embed.Author.Url">
                                                            <div class="chatlog__embed-author">@embed.Author.Name</div>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <div class="chatlog__embed-author">@embed.Author.Name</div>
                                                    }
                                                }
                                            </div>
                                        }

                                        @{/* Embed title */}
                                        @if (!string.IsNullOrWhiteSpace(embed.Title))
                                        {
                                            <div class="chatlog__embed-title">
                                                @if (!string.IsNullOrWhiteSpace(embed.Url))
                                                {
                                                    <a class="chatlog__embed-title-link" href="@embed.Url">
                                                        <div class="chatlog__markdown chatlog__markdown-preserve">@Raw(FormatEmbedMarkdown(embed.Title))</div>
                                                    </a>
                                                }
                                                else
                                                {
                                                    <div class="chatlog__markdown chatlog__markdown-preserve">@Raw(FormatEmbedMarkdown(embed.Title))</div>
                                                }
                                            </div>
                                        }

                                        @{/* Video player */}
                                        <div class="chatlog__embed-youtube-container">
                                            <iframe class="chatlog__embed-youtube" src="@youTubeVideoEmbed.Url" width="400" height="225"></iframe>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    // Generic embed
                    else
                    {
                        <div class="chatlog__embed">
                            @{/* Color pill */}
                            @if (embed.Color is not null)
                            {
                                <div class="chatlog__embed-color-pill" style="background-color: rgba(@embed.Color.Value.R, @embed.Color.Value.G, @embed.Color.Value.B, @embed.Color.Value.A)"></div>
                            }
                            else
                            {
                                <div class="chatlog__embed-color-pill chatlog__embed-color-pill--default"></div>
                            }

                            <div class="chatlog__embed-content-container">
                                <div class="chatlog__embed-content">
                                    <div class="chatlog__embed-text">
                                        @{/* Embed author */}
                                        @if (embed.Author is not null)
                                        {
                                            <div class="chatlog__embed-author-container">
                                                @if (!string.IsNullOrWhiteSpace(embed.Author.IconUrl))
                                                {
                                                    <img class="chatlog__embed-author-icon" src="@await ResolveUrlAsync(embed.Author.IconProxyUrl ?? embed.Author.IconUrl)" alt="Author icon" loading="lazy" onerror="this.style.visibility='hidden'">
                                                }

                                                @if (!string.IsNullOrWhiteSpace(embed.Author.Name))
                                                {
                                                    if (!string.IsNullOrWhiteSpace(embed.Author.Url))
                                                    {
                                                        <a class="chatlog__embed-author-link" href="@embed.Author.Url">
                                                            <div class="chatlog__embed-author">@embed.Author.Name</div>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <div class="chatlog__embed-author">@embed.Author.Name</div>
                                                    }
                                                }
                                            </div>
                                        }

                                        @{/* Embed title */}
                                        @if (!string.IsNullOrWhiteSpace(embed.Title))
                                        {
                                            <div class="chatlog__embed-title">
                                                @if (!string.IsNullOrWhiteSpace(embed.Url))
                                                {
                                                    <a class="chatlog__embed-title-link" href="@embed.Url">
                                                        <div class="chatlog__markdown chatlog__markdown-preserve">@Raw(FormatEmbedMarkdown(embed.Title))</div>
                                                    </a>
                                                }
                                                else
                                                {
                                                    <div class="chatlog__markdown chatlog__markdown-preserve">@Raw(FormatEmbedMarkdown(embed.Title))</div>
                                                }
                                            </div>
                                        }

                                        @{/* Embed description */}
                                        @if (!string.IsNullOrWhiteSpace(embed.Description))
                                        {
                                            <div class="chatlog__embed-description">
                                                <div class="chatlog__markdown chatlog__markdown-preserve">@Raw(FormatEmbedMarkdown(embed.Description))</div>
                                            </div>
                                        }

                                        @{/* Embed fields */}
                                        @if (embed.Fields.Any())
                                        {
                                            <div class="chatlog__embed-fields">
                                                @foreach (var field in embed.Fields)
                                                {
                                                    <div class="chatlog__embed-field @(field.IsInline ? "chatlog__embed-field--inline" : null)">
                                                        @if (!string.IsNullOrWhiteSpace(field.Name))
                                                        {
                                                            <div class="chatlog__embed-field-name">
                                                                <div class="chatlog__markdown chatlog__markdown-preserve">@Raw(FormatEmbedMarkdown(field.Name))</div>
                                                            </div>
                                                        }

                                                        @if (!string.IsNullOrWhiteSpace(field.Value))
                                                        {
                                                            <div class="chatlog__embed-field-value">
                                                                <div class="chatlog__markdown chatlog__markdown-preserve">@Raw(FormatEmbedMarkdown(field.Value))</div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>

                                    @{/* Embed content */}
                                    @if (embed.Thumbnail is not null && !string.IsNullOrWhiteSpace(embed.Thumbnail.Url))
                                    {
                                        <div class="chatlog__embed-thumbnail-container">
                                            <a class="chatlog__embed-thumbnail-link" href="@await ResolveUrlAsync(embed.Thumbnail.ProxyUrl ?? embed.Thumbnail.Url)">
                                                <img class="chatlog__embed-thumbnail" src="@await ResolveUrlAsync(embed.Thumbnail.ProxyUrl ?? embed.Thumbnail.Url)" alt="Thumbnail" loading="lazy">
                                            </a>
                                        </div>
                                    }
                                </div>

                                @{/* Embed image */}
                                @if (embed.Image is not null && !string.IsNullOrWhiteSpace(embed.Image.Url))
                                {
                                    <div class="chatlog__embed-image-container">
                                        <a class="chatlog__embed-image-link" href="@await ResolveUrlAsync(embed.Image.ProxyUrl ?? embed.Image.Url)">
                                            <img class="chatlog__embed-image" src="@await ResolveUrlAsync(embed.Image.ProxyUrl ?? embed.Image.Url)" alt="Image" loading="lazy">
                                        </a>
                                    </div>
                                }

                                @{/* Embed footer & icon */}
                                @if (embed.Footer is not null || embed.Timestamp is not null)
                                {
                                    <div class="chatlog__embed-footer">
                                        @{/* Footer icon */}
                                        @if (!string.IsNullOrWhiteSpace(embed.Footer?.IconUrl))
                                        {
                                            <img class="chatlog__embed-footer-icon" src="@await ResolveUrlAsync(embed.Footer.IconProxyUrl ?? embed.Footer.IconUrl)" alt="Footer icon" loading="lazy">
                                        }

                                        <span class="chatlog__embed-footer-text">
                                            @{/* Footer text */}
                                            @if (!string.IsNullOrWhiteSpace(embed.Footer?.Text))
                                            {
                                                @embed.Footer.Text
                                            }

                                            @if (!string.IsNullOrWhiteSpace(embed.Footer?.Text) && embed.Timestamp is not null)
                                            {
                                                @(" ‚Ä¢ ")
                                            }

                                            @{/* Embed timestamp */}
                                            @if (embed.Timestamp is not null)
                                            {
                                                @FormatDate(embed.Timestamp.Value)
                                            }
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }

                @{/* Stickers */}
                @foreach (var sticker in message.Stickers)
                {
                    <div class="chatlog__sticker" title="@sticker.Name">
                        @if (sticker.Format is StickerFormat.Png or StickerFormat.PngAnimated)
                        {
                            <img class="chatlog__sticker--media" src="@await ResolveUrlAsync(sticker.SourceUrl)" alt="Sticker">
                        }
                        else if (sticker.Format == StickerFormat.Lottie)
                        {
                            <div class="chatlog__sticker--media" data-source="@await ResolveUrlAsync(sticker.SourceUrl)"></div>
                        }
                    </div>
                }

                @{/* Message reactions */}
                @if (message.Reactions.Any())
                {
                    <div class="chatlog__reactions">
                        @foreach (var reaction in message.Reactions)
                        {
                            <div class="chatlog__reaction" title="@reaction.Emoji.Code">
                                <img class="chatlog__emoji chatlog__emoji--small" alt="@reaction.Emoji.Name" src="@await ResolveUrlAsync(reaction.Emoji.ImageUrl)" loading="lazy">
                                <span class="chatlog__reaction-count">@reaction.Count</span>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}
</div>
